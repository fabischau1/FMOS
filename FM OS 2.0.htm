<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FM OS 2.0</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            overflow: hidden;
            font-family: Arial, sans-serif;
        }
        .desktop {
            background: url('back.jpg') no-repeat;
            background-size: cover;
            position: relative;
            width: 100%;
            height: 100%;
        }
        .taskbar {
            background-color: #333;
            color: white;
            height: 40px;
            position: absolute;
            bottom: 0;
            width: 100%;
            display: flex;
            align-items: center;
            padding: 0 10px;
        }
        .taskbar button {
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            margin-right: 10px;
        }
        .window {
            background-color: white;
            border: 1px solid #000;
            position: absolute;
            top: 50px;
            left: 50px;
            width: 300px;
            height: 200px;
            display: none;
            flex-direction: column;
            z-index: 10;
        }
        .window-header {
            background-color: #0078d7;
            color: white;
            padding: 5px;
            cursor: move;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .window-body {
            flex: 1;
            padding: 10px;
        }
        .window-footer {
            padding: 5px;
            text-align: right;
        }
        .icon {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 100px;
            height: 100px;
            background-color: white;
            border: 1px solid #000;
            margin: 10px;
            font-size: 20px;
            cursor: pointer;
            user-select: none;
            transition: transform 0.2s ease-out;
            background-size: 100px 100px; /* Größe des Logo-Images anpassen */
            background-position: center; /* Logo-Image zentrieren */
        }
        .icon[data-file$=".js"] {
            background-image: url('js.jpg');
        }
        .icon[data-file$=".fexe"] {
            background-image: url('fexe.jpg');
        }
        .icon[data-file$=".fsys"] {
            background-image: url('fsys.jpg');
		}
		.icon[data-file$=".py"] {
            background-image: url('py.jpg');
		}
        .icon[data-file$=".zfp"] {
            background-image: url('folder.jpg');
        }
        .icon:not([data-file$=".js"]):not([data-file$=".fexe"]):not([data-file$=".fsys"]):not([data-file$=".zfp"]):not([data-file$=".py"]) {
            background-image: url('ico.jpg');
        }
        .icon[data-folder] {
            background-image: url('folder.jpg');
        }
        .icon.dragging {
            position: absolute;
            z-index: 100;
        }
        .icon span {
            position: absolute;
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
            text-align: center;
            color: white; /* Weißer Text */
        }
        .context-menu {
            position: absolute;
            background-color: white;
            border: 1px solid #000;
            display: none;
            z-index: 100;
        }
        .context-menu ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        .context-menu ul li {
            padding: 5px 10px;
            cursor: pointer;
        }
        .context-menu ul li:hover {
            background-color: #ddd;
        }
    </style>
</head>
<body>
    <div class="desktop" id="desktop" oncontextmenu="showContextMenu(event); return false;">
    </div>
    <div class="taskbar">
        <button onclick="createFile()">New File</button>
        <button onclick="createFolder()">New Folder</button>
    </div>
    <div class="window" id="editorWindow">
        <div class="window-header">
            <span id="editorTitle">Editor</span>
            <button onclick="closeWindow()" style="background:none; border:none; color:white;">X</button>
        </div>
        <div class="window-body">
            <textarea id="fileContent" style="width: 100%; height: 100%;"></textarea>
        </div>
        <div class="window-footer">
            <button onclick="saveFile()">Save</button>
            <button onclick="deleteFile()">Delete</button>
            <button onclick="executeJS()">Run</button>
        </div>
    </div>
    <div class="context-menu" id="contextMenu">
        <ul>
            <li onclick="renameFile()">Rename</li>
            <li onclick="deleteFile()">Delete</li>
			<li onclick="executeJS()">Run</li>
        </ul>
    </div>

    <script>
        let files = {};
        let folders = {};
        let selectedFile = null;
        let currentDraggedFile = null;

        function createFile() {
            const fileName = prompt("Filename:");
            if (fileName) {
                if (!files[fileName]) {
                    files[fileName] = "";
                    renderFiles();
                } else {
                    alert("File alredy exsists.");
                }
            }
        }

        function createFolder() {
          const folderName = prompt("Foldername:");
          if (folderName) {
            if (!folders[folderName]) {
              folders[folderName] = {};
              renderFiles();
            } else {
              alert("Ordner alredy exsists.");
            }
          }
        }

        function renderFiles() {
          const desktop = document.getElementById('desktop');
          desktop.innerHTML = '';
          for (const folderName in folders) {
            const folderIcon = document.createElement('div');
            folderIcon.className = 'icon';
			folderIcon.dataset.folder = folderName;
            folderIcon.innerHTML = folderName;
            folderIcon.onclick = () => openFolder(folderName);
            folderIcon.oncontextmenu = (e) => {
              selectedFile = folderName;
              showContextMenu(e);
              return false;
            };
            folderIcon.dataset.folder = folderName;
            desktop.appendChild(folderIcon);
          }
          for (const fileName in files) {
            const fileIcon = document.createElement('div');
            fileIcon.className = 'icon';
            fileIcon.dataset.file = fileName;
			const fileNameSpan = document.createElement('span');
		    fileNameSpan.textContent = fileName;
		    fileNameSpan.style.color = ''; // Weißer Text
			fileNameSpan.style.fontSize = '20px'; // Kleinerer Text
		    fileNameSpan.style.position = 'absolute'; // Positionierung unten
		    fileNameSpan.style.bottom = '-5'; // Unten positionieren
		    fileNameSpan.style.left = '50%'; // Zentrieren
		    fileNameSpan.style.transform = 'translateX(-50%)'; // Zentrieren
		    fileIcon.appendChild(fileNameSpan);
            fileIcon.onclick = () => openFile(fileName);
            fileIcon.oncontextmenu = (e) => {
              selectedFile = fileName;
              showContextMenu(e);
              return false;
            };
            fileIcon.dataset.file = fileName;
            desktop.appendChild(fileIcon);
          }
          positionIcons();
        }

        function openFile(fileName) {
            selectedFile = fileName;
            document.getElementById('editorTitle').innerText = `Editor - ${fileName}`;
            document.getElementById('fileContent').value = files[fileName];
            openWindow();
        }

        function openFolder(folderName) {
          const folderContent = folders[folderName];
          const folderWindow = document.createElement('div');
          folderWindow.className = 'window';
          folderWindow.innerHTML = `
            <div class="window-header">
              <span>${folderName}</span>
              <button onclick="closeFolder()">X</button>
            </div>
            <div class="window-body">
              <ul>
                ${Object.keys(folderContent).map((fileName) => `<li>${fileName}</li>`).join('')}
              </ul>
            </div>
          `;
          document.body.appendChild(folderWindow);
          folderWindow.style.top = '50px';
          folderWindow.style.left = '50px';
        }

        function closeFolder() {
          const folderWindow = document.querySelector('.window');
          folderWindow.remove();
        }

        function saveFile() {
            if (selectedFile) {
                files[selectedFile] = document.getElementById('fileContent').value;
                alert('File saved.');
            }
        }

        function deleteFile() {
            if (selectedFile) {
                const confirmDelete = confirm('Möchten Sie die Datei wirklich löschen?');
                if (confirmDelete) {
                    delete files[selectedFile];
                    closeWindow();
                    renderFiles();
                    selectedFile = null;
                }
            }
        }

        function renameFile() {
            if (selectedFile) {
                const newFileName = prompt("Neuer Dateiname:", selectedFile);
                if (newFileName &&!files[newFileName]) {
                    files[newFileName] = files[selectedFile];
                    delete files[selectedFile];
                    selectedFile = newFileName;
                    renderFiles();
                } else {
                    alert("ERROR");
                }
            }
        }

        function openWindow() {
            document.getElementById('editorWindow').style.display = 'flex';
            document.getElementById('fileContent').focus();
            window.scrollTo(0, 0);
        }

        function closeWindow() {
            document.getElementById('editorWindow').style.display = 'none';
            document.getElementById('fileContent').blur();
        }

        function showContextMenu(event) {
            const contextMenu = document.getElementById('contextMenu');
            contextMenu.style.top = `${event.clientY}px`;
            contextMenu.style.left = `${event.clientX}px`;
            contextMenu.style.display = 'block';
            document.addEventListener('click', hideContextMenu);
        }

        function hideContextMenu() {
            document.getElementById('contextMenu').style.display = 'none';
            document.removeEventListener('click', hideContextMenu);
        }

        function executeJS() {
            if (selectedFile && (selectedFile.endsWith('.fexe') || selectedFile.endsWith('.js') || selectedFile.endsWith('.py') || selectedFile.endsWith('.zfp') || selectedFile.endsWith('.fsys'))) {
                try {
                    eval(files[selectedFile]);
                } catch (error) {
                    alert(`ERROR: ${error.message}`);
                }
            } else {
                alert('ERROR This Filetype can not run Javaskript.');
            }
        }

        // Drag functionality for the window
        let isDragging = false;
        let offsetX, offsetY;

        document.querySelector('.window-header').addEventListener('mousedown', (e) => {
            isDragging = true;
            offsetX = e.clientX - document.getElementById('editorWindow').offsetLeft;
            offsetY = e.clientY - document.getElementById('editorWindow').offsetTop;

            document.addEventListener('mousemove', handleMouseMove);
            document.addEventListener('mouseup', handleMouseUp);
        });

        function handleMouseMove(e) {
            if (isDragging) {
                const newX = e.clientX - offsetX;
                const newY = e.clientY - offsetY;

                const maxX = window.innerWidth - document.getElementById('editorWindow').offsetWidth;
                const maxY = window.innerHeight - document.getElementById('editorWindow').offsetHeight;

                if (newX < 0) {
                    document.getElementById('editorWindow').style.left = '0';
                } else if (newX > maxX) {
                    document.getElementById('editorWindow').style.left = `${maxX}px`;
                } else {
                    document.getElementById('editorWindow').style.left = `${newX}px`;
                }

                if (newY < 0) {
                    document.getElementById('editorWindow').style.top = '0';
                } else if (newY > maxY) {
                    document.getElementById('editorWindow').style.top = `${maxY}px`;
                } else {
                    document.getElementById('editorWindow').style.top = `${newY}px`;
                }
            }
        }

        function handleMouseUp() {
            isDragging = false;
            document.removeEventListener('mousemove', handleMouseMove);
            document.removeEventListener('mouseup', handleMouseUp);
        }

        // Drag functionality for the icons
        let currentDraggedElement = null;

        document.querySelector('.desktop').addEventListener('mousedown', (e) => {
            if (e.target.classList.contains('icon')) {
                currentDraggedElement = e.target;
                currentDraggedFile = e.target.dataset.file;
                e.target.classList.add('dragging');
            }
        });

        document.querySelector('.desktop').addEventListener('mousemove', (e) => {
            if (currentDraggedElement) {
                const newX = e.clientX - currentDraggedElement.offsetWidth / 2;
                const newY = e.clientY - currentDraggedElement.offsetHeight / 2;

                const maxX = window.innerWidth - currentDraggedElement.offsetWidth;
                const maxY = window.innerHeight - currentDraggedElement.offsetHeight;

                if (newX < 0) {
                    currentDraggedElement.style.left = '0';
                } else if (newX > maxX) {
                    currentDraggedElement.style.left = `${maxX}px`;
                } else {
                    currentDraggedElement.style.left = `${newX}px`;
                }

                if (newY < 0) {
                    currentDraggedElement.style.top = '0';
                } else if (newY > maxY) {
                    currentDraggedElement.style.top = `${maxY}px`;
                } else {
                    currentDraggedElement.style.top = `${newY}px`;
                }
            }
        });

        document.querySelector('.desktop').addEventListener('mouseup', () => {
            if (currentDraggedElement) {
                currentDraggedElement.classList.remove('dragging');
                currentDraggedElement = null;
                currentDraggedFile = null;
            }
        });

        function positionIcons() {
            const icons = document.querySelectorAll('.icon');
            const desktopWidth = document.getElementById('desktop').offsetWidth;
            const iconWidth = icons[0].offsetWidth;
            const iconHeight = icons[0].offsetHeight;
            let x = 10;
            let y = 10;

            icons.forEach((icon) => {
                icon.style.left = `${x}px`;
                icon.style.top = `${y}px`;
                x += iconWidth + 10;
                if (x > desktopWidth - iconWidth - 10) {
                    x = 10;
                    y += iconHeight + 10;
                }
            });
        }
if (!localStorage.getItem('TOS')) {
    alert(`Terms of Service
BY CLICKING OK U AGREE TO THESE TOS:

1. Storage of Files in LocalStorage

We reserve the right to store files and data in the LocalStorage of your browser. This may include, but is not limited to, configuration data, user preferences, and other related information.

2. Responsibility and Risk

You acknowledge and agree that all data and information processed, stored, or otherwise handled through this service may be lost, corrupted, or otherwise compromised. You are 100% responsible for any and all consequences, damages, or losses that may arise from using this service, including but not limited to data loss, hardware damage, or any other issues.

3. No Warranty

The service is provided "as-is" with no warranty, express or implied. We do not guarantee that the service will be error-free, secure, or uninterrupted. You use the service entirely at your own risk, and we are not liable for any damages, losses, or issues that may occur as a result of using the service.

4. Modification of Terms

We reserve the right to modify these Terms of Service at any time. Any changes will be effective immediately upon posting. It is your responsibility to review these terms periodically to stay informed of any updates.`);
    localStorage.setItem('TOS', 'true');
}

        renderFiles();
    </script>
</body>
